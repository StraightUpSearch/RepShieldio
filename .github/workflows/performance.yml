name: Performance Monitoring

on:
  schedule:
    # Run performance tests twice daily
    - cron: '0 6,18 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        echo "🏗️ Building application for performance testing..."
        npm run build
        npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist
        
    - name: Start application
      run: |
        echo "🚀 Starting application..."
        cp env-template.txt .env
        echo "NODE_ENV=production" >> .env
        echo "DATABASE_URL=file:./perf-test.db" >> .env
        echo "SESSION_SECRET=perf-test-secret-key" >> .env
        npm run db:push
        npm run dev &
        sleep 15
        curl -f http://localhost:5000/health
        
    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v12
      with:
        urls: |
          http://localhost:5000
          http://localhost:5000/scan
          http://localhost:5000/login
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Create Lighthouse report
      run: |
        echo "## 🔍 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "Performance audit completed for RepShield.io" >> $GITHUB_STEP_SUMMARY
        echo "Check the uploaded artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and analyze bundle
      run: |
        echo "📦 Analyzing bundle size..."
        npm run build
        
        # Calculate build sizes
        if [ -d "client/dist" ]; then
          echo "Frontend build size:"
          du -sh client/dist/*
          
          # Check for large files
          find client/dist -size +500k -type f | head -10
        fi
        
        if [ -d "dist" ]; then
          echo "Backend build size:"
          du -sh dist/*
        fi
        
    - name: Check bundle size limits
      run: |
        echo "🚨 Checking bundle size limits..."
        
        # Set size limits (adjust as needed)
        MAX_JS_SIZE=1000000  # 1MB
        MAX_CSS_SIZE=200000  # 200KB
        
        if [ -d "client/dist" ]; then
          # Check JavaScript files
          for file in client/dist/assets/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              if [ $size -gt $MAX_JS_SIZE ]; then
                echo "⚠️ Large JS file detected: $file ($size bytes)"
              fi
            fi
          done
          
          # Check CSS files
          for file in client/dist/assets/*.css; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              if [ $size -gt $MAX_CSS_SIZE ]; then
                echo "⚠️ Large CSS file detected: $file ($size bytes)"
              fi
            fi
          done
        fi
        
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: |
          client/dist/
          dist/
        retention-days: 7

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and start application
      run: |
        echo "🏗️ Building for load testing..."
        npm run build
        npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist
        
        cp env-template.txt .env
        echo "NODE_ENV=production" >> .env
        echo "DATABASE_URL=file:./load-test.db" >> .env
        echo "SESSION_SECRET=load-test-secret-key" >> .env
        npm run db:push
        
        npm run dev &
        sleep 15
        curl -f http://localhost:5000/health
        
    - name: Install Artillery for load testing
      run: npm install -g artillery@latest
      
    - name: Create load test configuration
      run: |
        cat > load-test.yml << EOF
        config:
          target: 'http://localhost:5000'
          phases:
            - duration: 60
              arrivalRate: 5
              name: "Warm up"
            - duration: 120
              arrivalRate: 10
              name: "Load test"
            - duration: 60
              arrivalRate: 15
              name: "Spike test"
        scenarios:
          - name: "Health check"
            weight: 30
            flow:
              - get:
                  url: "/health"
          - name: "Homepage"
            weight: 40
            flow:
              - get:
                  url: "/"
          - name: "Scan page"
            weight: 20
            flow:
              - get:
                  url: "/scan"
          - name: "Login page"
            weight: 10
            flow:
              - get:
                  url: "/login"
        EOF
        
    - name: Run load test
      run: |
        echo "🚀 Running load test..."
        artillery run load-test.yml --output load-test-report.json
        
    - name: Generate load test report
      run: |
        echo "📊 Generating load test report..."
        artillery report load-test-report.json --output load-test-report.html
        
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results-${{ github.sha }}
        path: |
          load-test-report.json
          load-test-report.html
        retention-days: 30
        
    - name: Check performance thresholds
      run: |
        echo "🎯 Checking performance thresholds..."
        
        # Extract metrics from Artillery report
        if [ -f "load-test-report.json" ]; then
          # Basic threshold checks (adjust as needed)
          echo "Load test completed - check artifacts for detailed results"
        else
          echo "❌ Load test report not found"
          exit 1
        fi

  database-performance:
    name: Database Performance Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        database: [sqlite, postgresql]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup database
      run: |
        if [ "${{ matrix.database }}" = "sqlite" ]; then
          echo "DATABASE_URL=file:./perf-test-sqlite.db" > .env
        else
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" > .env
        fi
        echo "NODE_ENV=test" >> .env
        echo "SESSION_SECRET=test-secret" >> .env
        
        npm run db:push
        
    - name: Run database performance tests
      run: |
        echo "🗄️ Running database performance tests for ${{ matrix.database }}..."
        
        # Create a simple performance test script
        cat > db-perf-test.js << 'EOF'
        import { storage } from './server/storage.js';
        
        async function runPerformanceTest() {
          console.log('Starting database performance test...');
          
          const startTime = Date.now();
          
          // Test user creation performance
          const users = [];
          for (let i = 0; i < 100; i++) {
            try {
              const user = await storage.createUser({
                id: `test-user-${i}`,
                email: `test${i}@example.com`,
                firstName: 'Test',
                lastName: 'User',
                password: 'hashedpassword'
              });
              users.push(user);
            } catch (error) {
              console.warn(`Failed to create user ${i}:`, error.message);
            }
          }
          
          const userCreationTime = Date.now() - startTime;
          console.log(`Created ${users.length} users in ${userCreationTime}ms`);
          
          // Test ticket creation performance
          const ticketStartTime = Date.now();
          for (let i = 0; i < 50; i++) {
            try {
              await storage.createTicket({
                userId: users[i % users.length].id,
                type: 'Content Removal',
                title: `Test ticket ${i}`,
                description: 'Performance test ticket',
                priority: 'standard',
                status: 'pending'
              });
            } catch (error) {
              console.warn(`Failed to create ticket ${i}:`, error.message);
            }
          }
          
          const ticketCreationTime = Date.now() - ticketStartTime;
          console.log(`Created 50 tickets in ${ticketCreationTime}ms`);
          
          // Test query performance
          const queryStartTime = Date.now();
          const allUsers = await storage.getAllUsers();
          const queryTime = Date.now() - queryStartTime;
          console.log(`Queried ${allUsers.length} users in ${queryTime}ms`);
          
          const totalTime = Date.now() - startTime;
          console.log(`Total test time: ${totalTime}ms`);
          
          // Performance thresholds
          if (userCreationTime > 5000) console.warn('⚠️ User creation is slow');
          if (ticketCreationTime > 3000) console.warn('⚠️ Ticket creation is slow');
          if (queryTime > 1000) console.warn('⚠️ Query performance is slow');
          
          console.log('✅ Database performance test completed');
        }
        
        runPerformanceTest().catch(console.error);
        EOF
        
        node db-perf-test.js

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, bundle-analysis, database-performance]
    if: always()
    
    steps:
    - name: Generate performance summary
      run: |
        echo "## ⚡ Performance Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lighthouse Audit | ${{ needs.lighthouse-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database Performance | ${{ needs.database-performance.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY 
name: Database Migrations

on:
  push:
    branches: [ main, staging ]
    paths:
      - 'migrations/**'
      - 'shared/schema.ts'
      - 'drizzle.config.ts'
  pull_request:
    branches: [ main ]
    paths:
      - 'migrations/**'
      - 'shared/schema.ts'
      - 'drizzle.config.ts'

jobs:
  validate-migrations:
    name: Validate Migration Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate migration syntax
      run: |
        echo "🔍 Validating migration file syntax..."
        npx drizzle-kit check
        
    - name: Test migrations against SQLite (development)
      env:
        NODE_ENV: development
        DEV_DATABASE_URL: sqlite://test-dev.db
      run: |
        echo "🧪 Testing migrations against SQLite..."
        npx drizzle-kit push
        echo "✅ SQLite migrations successful"
        
    - name: Test migrations against PostgreSQL (if available)
      if: ${{ vars.TEST_POSTGRES_URL }}
      env:
        NODE_ENV: production
        PROD_DATABASE_URL: ${{ vars.TEST_POSTGRES_URL }}
      run: |
        echo "🧪 Testing migrations against PostgreSQL..."
        npx drizzle-kit push
        echo "✅ PostgreSQL migrations successful"

  deploy-staging:
    name: Deploy to Staging Database
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run staging migrations
      env:
        NODE_ENV: production
        PROD_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        SESSION_SECRET: ${{ secrets.STAGING_SESSION_SECRET }}
      run: |
        echo "🚀 Deploying migrations to staging database..."
        npx drizzle-kit push
        echo "✅ Staging migrations completed"
        
    - name: Verify database connection
      env:
        NODE_ENV: production
        PROD_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      run: |
        echo "🔍 Verifying database connection..."
        node -e "
          import('./server/config/database.js').then(({ db }) => {
            console.log('✅ Database connection verified');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Database connection failed:', err);
            process.exit(1);
          });
        "

  deploy-production:
    name: Deploy to Production Database
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Pre-migration backup (PostgreSQL only)
      env:
        PROD_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        if [[ "${{ secrets.PRODUCTION_DATABASE_URL }}" == postgresql* ]]; then
          echo "📦 Creating database backup..."
          # Add backup logic here
          echo "✅ Backup completed"
        else
          echo "ℹ️  SQLite detected - manual backup recommended"
        fi
        
    - name: Run production migrations
      env:
        NODE_ENV: production
        PROD_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        SESSION_SECRET: ${{ secrets.PRODUCTION_SESSION_SECRET }}
      run: |
        echo "🚀 Deploying migrations to production database..."
        echo "⚠️  This will modify the production database"
        npx drizzle-kit push
        echo "✅ Production migrations completed"
        
    - name: Verify production database
      env:
        NODE_ENV: production
        PROD_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        echo "🔍 Verifying production database connection..."
        node -e "
          import('./server/config/database.js').then(({ db }) => {
            console.log('✅ Production database verified');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Production database verification failed:', err);
            process.exit(1);
          });
        "
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Production database migrations deployed successfully"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "💥 Production database migration failed - manual intervention required"
        # Add alert logic for failures 